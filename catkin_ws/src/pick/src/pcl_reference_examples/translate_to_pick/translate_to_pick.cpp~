/* 
original authors
---------------------------------------------------
PCLVisualizer: Geoffrey Biggs 
---------------------------------------------------
customized: Taylor Finley

Description: 

Call: ./translate_to_pick [source].pcd [target].pcd

The source will be the reference point cloud (liftnig eye) and the target will be the scene from the kinect.
This will test the functionality of translating a point cloud (lifting eye) to the picked point on the screen.
This will be the first part of the iterative alignment of the lifting eye alignment to the the scene.
The output of the program will be a a lifting eye point cloud in a single color overlaid on the scene close to the 
lifting eye of the scene.

*/


#include <iostream>

#include <boost/thread/thread.hpp>
#include <pcl/common/common_headers.h>
#include <pcl/features/normal_3d.h>
#include <pcl/io/pcd_io.h>
#include <pcl/visualization/pcl_visualizer.h>
#include <pcl/console/parse.h>
//TF customization
#include <pcl/visualization/point_picking_event.h>
#include <pcl/console/parse.h>
#include <pcl/filters/crop_box.h>
#include <pcl/impl/point_types.hpp>
#include <pcl/filters/passthrough.h>
#include <pcl/registration/icp.h>

//global variables
//visualizer
pcl::visualization::PCLVisualizer *viewer;
//x,y,z values for picked point
float picked_x, picked_y, picked_z;
bool pointPicked = false;


//TF Customization added from example to print out xyz from picking of point from cloud

void pp_callback (const pcl::visualization::PointPickingEvent &event) 
{ 
  
  //float picked_x, picked_y, picked_z;
  if (event.getPointIndex () == -1)
  {
    cout << "pointindex = -1" << endl;
    return;
  }
  event.getPoint(picked_x, picked_y, picked_z);
  //I'm getting a lot of missed points and segmenting in the wrong area. this will help prevent this.s
  if (picked_z < 0.1)
  {
    cout << "missed point: " << picked_z << endl;
    return;
  }
  cout << picked_x << "  " << picked_y << " " << picked_z << endl;
  pointPicked = true;
}


// --------------
// -----Main-----
// --------------
int
main (int argc, char** argv)
{ 
  
  //load pcd files from arguments
  pcl::PointCloud<pcl::PointXYZRGB>::Ptr cloud_source (new pcl::PointCloud<pcl::PointXYZRGB>); //lifting eye
  pcl::PointCloud<pcl::PointXYZRGB>::Ptr cloud_source_moved (new pcl::PointCloud<pcl::PointXYZRGB>); //lifting eye moved
  pcl::PointCloud<pcl::PointXYZRGB>::Ptr cloud_target (new pcl::PointCloud<pcl::PointXYZRGB>); //scene
  if (pcl::io::loadPCDFile (argv[1], *cloud_source) < 0)
  {
    std::cout << "Error loading model cloud." << std::endl;
    return (-1);
  }
  if (pcl::io::loadPCDFile (argv[2], *cloud_target) < 0)
  {
    std::cout << "Error loading scene cloud." << std::endl;
    return (-1);
  }


  // -----Open 3D viewer and add point cloud-----
  cout << "creating viewer now" << endl;

  viewer = new pcl::visualization::PCLVisualizer ("3D Viewer");
  viewer->setBackgroundColor (0, 0, 0);
  viewer->addCoordinateSystem (0.1);
  viewer->initCameraParameters ();

  pcl::visualization::PointCloudColorHandlerRGBField<pcl::PointXYZRGB> rgb(cloud_target); //what does this do?
  viewer->addPointCloud<pcl::PointXYZRGB> (cloud_target, rgb, "initial cloud");
  viewer->setPointCloudRenderingProperties (pcl::visualization::PCL_VISUALIZER_POINT_SIZE, 10, "initial cloud");
  viewer->registerPointPickingCallback (pp_callback);

  //TF custom camera position for this point cloud from Kinect to make it look like a 2D picture
  viewer->spinOnce(1000);
  viewer->setCameraPosition(0.00, 0.00, -1.25, 0.00, 0.00, 0.625, -0.00, -0.99999, 0.000);
  viewer->setCameraFieldOfView(0.523599);
  viewer->setCameraClipDistances(0.0, 4.0);
  viewer->setSize(1000,1000);
  viewer->updateCamera(); 
  viewer->spinOnce(100);
  cout << " " << endl;
   
  while (!viewer->wasStopped ())
  {
    viewer->spinOnce (100); //are either of these causing the picking to be hard
    boost::this_thread::sleep (boost::posix_time::microseconds (100)); //are either of these causing the picking to be hard
    //
    if (pointPicked)
    {

  	//add sphere to previously picked point on top of lifting eye
  	pcl::PointXYZ p1;
  	p1.x = picked_x;
  	p1.y = picked_y;
  	p1.z = picked_z;
 	viewer->addSphere(p1, 0.005, 1.0, 0.0, 1.0, "PickedPoint", 0);
	
	//turn off point picked bool
	pointPicked = false;

	
	//translate cloud
	Eigen::Matrix4f transformationMatrix;
	transformationMatrix << 1, 0, 0, picked_x,
				0, 1, 0, picked_y,
				0, 0, 1, picked_z,
				0, 0, 0, 1;
	pcl::transformPointCloud(*cloud_source, *cloud_source, transformationMatrix); //I am not sure if using the same cloud as the target and source here will cause an issue. I really dont want another copy of the source.
	
	/*
	//save cloud to test
	pcl::io::savePCDFile("moved.pcd", *cloud_source_moved);
	pcl::io::savePCDFile("cloud_source.pcd", *cloud_source);
  	//example: pcl::io::savePCDFileBinary ("output.pcd", transformed_cloud);	
	*/
	

	//add new cloud to viewer
	pcl::visualization::PointCloudColorHandlerCustom<pcl::PointXYZRGB> single_color(cloud_source, 0, 255, 0);
  	viewer->addPointCloud<pcl::PointXYZRGB> (cloud_source, single_color, "aligned cloud");
  	viewer->setPointCloudRenderingProperties (pcl::visualization::PCL_VISUALIZER_POINT_SIZE, 3, "aligned cloud");
	
    }
  
  }
}
