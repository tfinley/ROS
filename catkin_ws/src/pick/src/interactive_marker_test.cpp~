/*

Originally created by Taylor Finley, 2013.11.21
License: BSD
Description: 	This will manually create a two points to create an arrow marker
 It will then publish out the marker to rviz to display the arrow

ARROW DETAILS

Start/End Points

You can also specify a start/end point for the arrow, using the points member. If you put points into the points member, it will assume you want to do things this way.
The point at index 0 is assumed to be the start point, and the point at index 1 is assumed to be the end.
scale.x is the shaft diameter, and scale.y is the head diameter. If scale.z is not zero, it specifies the head length.

*/

#include <ros/ros.h>
#include <visualization_msgs/Marker.h>
#include <interactive_markers/interactive_marker_server.h>
#include <interactive_markers/menu_handler.h>
#include <tf/transform_broadcaster.h>
#include <tf/tf.h>

using namespace visualization_msgs;

boost::shared_ptr<interactive_markers::InteractiveMarkerServer> server;
interactive_markers::MenuHandler menu_handler;

Marker makeBox( InteractiveMarker &msg )
{
  Marker marker;

  marker.type = Marker::CUBE;
  marker.scale.x = msg.scale * 0.45;
  marker.scale.y = msg.scale * 0.45;
  marker.scale.z = msg.scale * 0.45;
  marker.color.r = 0.5;
  marker.color.g = 0.5;
  marker.color.b = 0.5;
  marker.color.a = 1.0;

  return marker;
}


void processFeedback( const visualization_msgs::InteractiveMarkerFeedbackConstPtr &feedback )
{
  std::cout << "button click" << std::endl;      
}

void makeButtonMarker()
{
  InteractiveMarker int_marker;
  int_marker.header.frame_id = "/base_link";
  int_marker.pose.position.y = -3.0 ;
  int_marker.scale = 1;

  int_marker.name = "button";
  int_marker.description = "Button\n(Left Click)";

  InteractiveMarkerControl control;

  control.interaction_mode = InteractiveMarkerControl::BUTTON;
  control.name = "button_control";

  Marker marker = makeBox( int_marker );
  control.markers.push_back( marker );
  control.always_visible = true;
  int_marker.controls.push_back(control);

  server->insert(int_marker);
  server->setCallback(int_marker.name, &processFeedback);

/*


  // create an interactive marker server on the topic namespace simple_marker
  interactive_markers::InteractiveMarkerServer server("simple_marker");

  // create an interactive marker for our server
  visualization_msgs::InteractiveMarker int_marker;
  int_marker.header.frame_id = "/camera_rgb_optical_frame";
  int_marker.name = "interactive_arrow";
  int_marker.description = "arrow_button";
  //int_marker.scale = 1;

  // create a grey box marker
  visualization_msgs::Marker arrow_marker;
  arrow_marker.type = visualization_msgs::Marker::ARROW;
   
  // Arrow Scale
  arrow_marker.scale.x = 0.015;
  arrow_marker.scale.y = 0.025;

  // arrow is red
  arrow_marker.color.r = 1.0;
  arrow_marker.color.a = 0.5;

  geometry_msgs::Point p0;
  p0.x = -0.128;
  p0.y = -0.061;
  p0.z = 1.423;

  //points.points.push_back(p0);
  arrow_marker.points.push_back(p0);

  geometry_msgs::Point p1;
  p1.x = -0.128;
  p1.y = -0.151;
  p1.z = 1.449;

  //points.points.push_back(p1);
  arrow_marker.points.push_back(p1);

  // create a non-interactive control which contains the arrow
  visualization_msgs::InteractiveMarkerControl button_control;
  button_control.always_visible = true;
  button_control.name = "button_control";
  button_control.interaction_mode = visualization_msgs::InteractiveMarkerControl::BUTTON;
  button_control.markers.push_back( arrow_marker );

  // add the control to the interactive marker
  int_marker.controls.push_back( button_control );

  server.insert(int_marker);
  //server.setCallback(int_marker.name, );
 
  // 'commit' changes and send to all clients
  server.applyChanges();

  // start the ROS main loop
  ros::spin();


*/
}

int
main (int argc, char** argv)
{
  // Initialize ROS
  ros::init(argc, argv, "interactive_marker_test");
  ros::NodeHandle n;

  // create a timer to update the published transforms
  ros::Timer frame_timer = n.createTimer(ros::Duration(0.01), frameCallback);

  server.reset( new interactive_markers::InteractiveMarkerServer("interactive_marker_test","",false) );

  ros::Duration(0.1).sleep();

  menu_handler.insert( "First Entry", &processFeedback );
  menu_handler.insert( "Second Entry", &processFeedback );
  interactive_markers::MenuHandler::EntryHandle sub_menu_handle = menu_handler.insert( "Submenu" );
  menu_handler.insert( sub_menu_handle, "First Entry", &processFeedback );
  menu_handler.insert( sub_menu_handle, "Second Entry", &processFeedback );


  makeButtonMarker( );


  server->applyChanges();

  ros::spin();

  server.reset();
}
